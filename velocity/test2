
// 123-45-6789

function CheckSSN(para) {
    let ssn = 123 - 45 - 6789

    let paraArray = []
    for (let i = 0; i < para.length; i++) {
        paraArray.push(para[i])
    }
    //  let paraNumber =   paraArray.map((elem)=> {
    //  return Number(elem)
    //   })

    // for(let i = 0; i < paraArray.length; i++){
    if (paraArray[3] === '-' && paraArray[6] === '-') {
        let firstInd = paraArray.indexOf('-')
        let slicedData = paraArray.slice(0, firstInd)
        if (slicedData.length == 3 && typeof para == Number)
            return true

    } else {
        return false
    }
    // }


}

CheckSSN('hello my name')




{/* <input onChange={(e) => if (typeof e.target.value === "string") setValid(CheckSSN(e.target.value))} /> */ }





// CHALLENGE ONE:

// Write a boolean function returning true if input string is a valid SSN("123-45-6789")
//     * /

// function validateSSN(ssnString) {
//     return false
// }






/*
CHALLENGE TWO:

A string of characters like "({12}[34(56){67}])" is said to be well-formed if every opening brace
(square, curly, or parens) has a matching close AND the closing brace comes in the opposite order of the opening.

Valid: "({12}[34(56){67}])"
Invalid "({12)"
Invalid "({12)}"

Write a validator that can determine the well-formed-ness of an input string.
*/

function validateString(str) {
    return false
}
